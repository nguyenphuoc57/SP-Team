module multiply (A,B,C);
input [31:0] A,B;
output reg [31:0] C;
 reg [47:0] C1;
 reg [23:0] A1,B1;
 always @(A or B) begin
  
		if(A[30:0]==31'd0 || B[30:0]==31'd0) begin
		C=32'd0;
		end
		else begin
		C[31] = (A[31]-B[31]==0)?1'b0:1'b1;  //bit dau
		
		C[30:23] = A[30:23] + B[30:23] - 8'd127; //exponent
		
		
		A1= {1'd1,A[22:0]};				//mantassis
		B1={1'd1,B[22:0]};
		C1 = A1 * B1;

	//normalize
		
		if (C1[47]==1'b0) begin		
			C[22:0] = C1[45:23];
			end
		else begin		
			C[30:23]=C[30:23]+8'd1;
			C[22:0] =C1[46:24];
			end
end
end
endmodule 